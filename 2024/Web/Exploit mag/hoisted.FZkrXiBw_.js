function p(t, i) {
    if (!(t instanceof i)) {
      throw new TypeError('Cannot call a class as a function')
    }
  }
  function S(t, i) {
    for (var e = 0; e < i.length; e++) {
      var n = i[e]
      n.enumerable = n.enumerable || false
      n.configurable = true
      'value' in n && (n.writable = true)
      Object.defineProperty(t, n.key, n)
    }
  }
  function C(t, i, e) {
    return i && S(t.prototype, i), e && S(t, e), t
  }
  function g(t) {
    return +t.replace(/px/, '')
  }
  function R(t) {
    var i = window.devicePixelRatio,
      e = getComputedStyle(t),
      n = g(e.getPropertyValue('width')),
      o = g(e.getPropertyValue('height'))
    t.setAttribute('width', (n * i).toString())
    t.setAttribute('height', (o * i).toString())
  }
  function f(t, i) {
    var e = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0,
      n = Math.random() * (i - t) + t
    return Math.floor(n * Math.pow(10, e)) / Math.pow(10, e)
  }
  function _(t) {
    return t[f(0, t.length)]
  }
  var b = 0.00125,
    O = 0.0005,
    F = 0.0009,
    w = 0.00001,
    M = 6,
    D = 80,
    L = 0.9,
    x = 1.7,
    z = 0.2,
    B = 0.6,
    k = 0.03,
    q = 0.07,
    y = 15,
    A = 82,
    U = 150,
    X = 100,
    W = 250,
    H = 40,
    V = [
      '#fcf403',
      '#62fc03',
      '#f4fc03',
      '#03e7fc',
      '#03fca5',
      '#a503fc',
      '#fc03ad',
      '#fc03c2',
    ]
  function E(t) {
    return Math.log(t) / Math.log(1920)
  }
  var N = (function () {
    function t(i) {
      p(this, t)
      var e = i.initialPosition,
        n = i.direction,
        o = i.confettiRadius,
        s = i.confettiColors,
        a = i.emojis,
        u = i.emojiSize,
        h = i.canvasWidth,
        c = f(L, x, 3),
        r = c * E(h)
      this.confettiSpeed = {
        x: r,
        y: r,
      }
      this.finalConfettiSpeedX = f(z, B, 3)
      this.rotationSpeed = a.length ? 0.01 : f(k, q, 3) * E(h)
      this.dragForceCoefficient = f(O, F, 6)
      this.radius = {
        x: o,
        y: o,
      }
      this.initialRadius = o
      this.rotationAngle = n === 'left' ? f(0, 0.2, 3) : f(-0.2, 0, 3)
      this.emojiSize = u
      this.emojiRotationAngle = f(0, 2 * Math.PI)
      this.radiusYUpdateDirection = 'down'
      var d =
        n === 'left' ? (f(A, y) * Math.PI) / 180 : (f(-y, -A) * Math.PI) / 180
      this.absCos = Math.abs(Math.cos(d))
      this.absSin = Math.abs(Math.sin(d))
      var l = f(-U, 0),
        m = {
          x: e.x + (n === 'left' ? -l : l) * this.absCos,
          y: e.y - l * this.absSin,
        }
      this.currentPosition = Object.assign({}, m)
      this.initialPosition = Object.assign({}, m)
      this.color = a.length ? null : _(s)
      this.emoji = a.length ? _(a) : null
      this.createdAt = new Date().getTime()
      this.direction = n
    }
    return (
      C(t, [
        {
          key: 'draw',
          value: function (e) {
            var n = this.currentPosition,
              o = this.radius,
              s = this.color,
              a = this.emoji,
              u = this.rotationAngle,
              h = this.emojiRotationAngle,
              c = this.emojiSize,
              r = window.devicePixelRatio
            s
              ? ((e.fillStyle = s),
                e.beginPath(),
                e.ellipse(n.x * r, n.y * r, o.x * r, o.y * r, u, 0, 2 * Math.PI),
                e.fill())
              : a &&
                ((e.font = ''.concat(c, 'px serif')),
                e.save(),
                e.translate(r * n.x, r * n.y),
                e.rotate(h),
                (e.textAlign = 'center'),
                e.fillText(a, 0, 0),
                e.restore())
          },
        },
        {
          key: 'updatePosition',
          value: function (e, n) {
            var o = this.confettiSpeed,
              s = this.dragForceCoefficient,
              a = this.finalConfettiSpeedX,
              u = this.radiusYUpdateDirection,
              h = this.rotationSpeed,
              c = this.createdAt,
              r = this.direction,
              d = n - c
            if (
              (o.x > a && (this.confettiSpeed.x -= s * e),
              (this.currentPosition.x +=
                o.x * (r === 'left' ? -this.absCos : this.absCos) * e),
              (this.currentPosition.y =
                this.initialPosition.y -
                o.y * this.absSin * d +
                (b * Math.pow(d, 2)) / 2),
              (this.rotationSpeed -= this.emoji ? 0.0001 : w * e),
              this.rotationSpeed < 0 && (this.rotationSpeed = 0),
              this.emoji)
            ) {
              this.emojiRotationAngle += (this.rotationSpeed * e) % (2 * Math.PI)
              return
            }
            u === 'down'
              ? ((this.radius.y -= e * h),
                this.radius.y <= 0 &&
                  ((this.radius.y = 0), (this.radiusYUpdateDirection = 'up')))
              : ((this.radius.y += e * h),
                this.radius.y >= this.initialRadius &&
                  ((this.radius.y = this.initialRadius),
                  (this.radiusYUpdateDirection = 'down')))
          },
        },
        {
          key: 'getIsVisibleOnCanvas',
          value: function (e) {
            return this.currentPosition.y < e + X
          },
        },
      ]),
      t
    )
  })()
  function G() {
    var t = document.createElement('canvas')
    return (
      (t.style.position = 'fixed'),
      (t.style.width = '100%'),
      (t.style.height = '100%'),
      (t.style.top = '0'),
      (t.style.left = '0'),
      (t.style.zIndex = '1000'),
      (t.style.pointerEvents = 'none'),
      document.body.appendChild(t),
      t
    )
  }
  function Y(t) {
    var i = t.confettiRadius,
      e = i === void 0 ? M : i,
      n = t.confettiNumber,
      o = n === void 0 ? t.confettiesNumber || (t.emojis ? H : W) : n,
      s = t.confettiColors,
      a = s === void 0 ? V : s,
      u = t.emojis,
      h = u === void 0 ? t.emojies || [] : u,
      c = t.emojiSize,
      r = c === void 0 ? D : c
    return (
      t.emojies &&
        console.error(
          'emojies argument is deprecated, please use emojis instead'
        ),
      t.confettiesNumber &&
        console.error(
          'confettiesNumber argument is deprecated, please use confettiNumber instead'
        ),
      {
        confettiRadius: e,
        confettiNumber: o,
        confettiColors: a,
        emojis: h,
        emojiSize: r,
      }
    )
  }
  var $ = (function () {
      function t(i) {
        var e = this
        p(this, t)
        this.canvasContext = i
        this.shapes = []
        this.promise = new Promise(function (n) {
          return (e.resolvePromise = n)
        })
      }
      return (
        C(t, [
          {
            key: 'getBatchCompletePromise',
            value: function () {
              return this.promise
            },
          },
          {
            key: 'addShapes',
            value: function () {
              var e
              ;(e = this.shapes).push.apply(e, arguments)
            },
          },
          {
            key: 'complete',
            value: function () {
              var e
              return this.shapes.length
                ? false
                : ((e = this.resolvePromise) === null ||
                    e === void 0 ||
                    e.call(this),
                  true)
            },
          },
          {
            key: 'processShapes',
            value: function (e, n, o) {
              var s = this,
                a = e.timeDelta,
                u = e.currentTime
              this.shapes = this.shapes.filter(function (h) {
                return (
                  h.updatePosition(a, u),
                  h.draw(s.canvasContext),
                  o ? h.getIsVisibleOnCanvas(n) : true
                )
              })
            },
          },
        ]),
        t
      )
    })(),
    J = (function () {
      function t() {
        var i =
          arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}
        p(this, t)
        this.activeConfettiBatches = []
        this.canvas = i.canvas || G()
        this.canvasContext = this.canvas.getContext('2d')
        this.requestAnimationFrameRequested = false
        this.lastUpdated = new Date().getTime()
        this.iterationIndex = 0
        this.loop = this.loop.bind(this)
        requestAnimationFrame(this.loop)
      }
      return (
        C(t, [
          {
            key: 'loop',
            value: function () {
              this.requestAnimationFrameRequested = false
              R(this.canvas)
              var e = new Date().getTime(),
                n = e - this.lastUpdated,
                o = this.canvas.offsetHeight,
                s = this.iterationIndex % 10 === 0
              this.activeConfettiBatches = this.activeConfettiBatches.filter(
                function (a) {
                  return (
                    a.processShapes(
                      {
                        timeDelta: n,
                        currentTime: e,
                      },
                      o,
                      s
                    ),
                    s ? !a.complete() : true
                  )
                }
              )
              this.iterationIndex++
              this.queueAnimationFrameIfNeeded(e)
            },
          },
          {
            key: 'queueAnimationFrameIfNeeded',
            value: function (e) {
              this.requestAnimationFrameRequested ||
                this.activeConfettiBatches.length < 1 ||
                ((this.requestAnimationFrameRequested = true),
                (this.lastUpdated = e || new Date().getTime()),
                requestAnimationFrame(this.loop))
            },
          },
          {
            key: 'addConfetti',
            value: function () {
              for (
                var e =
                    arguments.length > 0 && arguments[0] !== void 0
                      ? arguments[0]
                      : {},
                  n = Y(e),
                  o = n.confettiRadius,
                  s = n.confettiNumber,
                  a = n.confettiColors,
                  u = n.emojis,
                  h = n.emojiSize,
                  c = this.canvas.getBoundingClientRect(),
                  r = c.width,
                  d = c.height,
                  l = (d * 5) / 7,
                  m = {
                    x: 0,
                    y: l,
                  },
                  T = {
                    x: r,
                    y: l,
                  },
                  v = new $(this.canvasContext),
                  I = 0;
                I < s / 2;
                I++
              ) {
                var j = new N({
                    initialPosition: m,
                    direction: 'right',
                    confettiRadius: o,
                    confettiColors: a,
                    confettiNumber: s,
                    emojis: u,
                    emojiSize: h,
                    canvasWidth: r,
                  }),
                  P = new N({
                    initialPosition: T,
                    direction: 'left',
                    confettiRadius: o,
                    confettiColors: a,
                    confettiNumber: s,
                    emojis: u,
                    emojiSize: h,
                    canvasWidth: r,
                  })
                v.addShapes(j, P)
              }
              return (
                this.activeConfettiBatches.push(v),
                this.queueAnimationFrameIfNeeded(),
                v.getBatchCompletePromise()
              )
            },
          },
          {
            key: 'clearCanvas',
            value: function () {
              this.activeConfettiBatches = []
            },
          },
          {
            key: 'destroyCanvas',
            value: function () {
              this.canvas.remove()
            },
          },
        ]),
        t
      )
    })()
  const Z = () => {
    new J().addConfetti({
      emojis: ['\uD83C\uDFC6', '\u2728'],
      emojiSize: 50,
      confettiNumber: 30,
    })
  }
  document.getElementById('trophy')?.addEventListener('click', Z)
  